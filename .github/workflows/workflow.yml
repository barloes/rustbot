on: [push]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Delete, Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: imagerepo
        IMAGE_TAG: latest
        INSTANCE_ID:
      working-directory: ./rustbot
      run: |
        # delete the existing image
        aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=latest
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker buildx build --platform linux/arm64/v8 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
    - name: stop ec2
      id: stop-ec2
      env:
        INSTANCE_ID: i-0f122ad67193a6e71
      run: |
        aws ec2 stop-instances --instance-ids $INSTANCE_ID

    - name: Sleep for 30 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '30s'

    - name: start ec2
      id: start-ec2
      env:
        INSTANCE_ID: ${{steps.stop-ec2.env.INSTANCE_ID}}
      run: |
        aws ec2 start-instances --instance-ids $INSTANCE_ID

        